#axiom = Node("space_station")
#axiom = Node("klingon")
#axiom = Node("spike_ship")
#axiom = Node("wing_ship")
#axiom = Node("c_station")
#axiom = Node("rotational_ship")
#axiom = Node("tie_fighter")

#==================================================================
#uses absolute coordinates (-a)

space_station_num_spires = random.randint(1,7)
space_station_num_spokes = random.randint(1,7)

space_station_radius = random.randint(50,80)
space_station_extents = vec3(space_station_radius, random.randint(10,25), space_station_radius)

space_station_subtractive_disk_radius = space_station_radius * random.uniform(0.5, 0.85)
space_station_subtractive_disk_extents = vec3(space_station_subtractive_disk_radius, space_station_extents[1] * 1.2, space_station_subtractive_disk_radius)

ss_spire_extents = vec3(random.randint(10,15), random.randint(20,50), random.randint(10,15))
ss_spire_shape = "ellipsoid"
if random.randint(1,2) <= 1:
    ss_spire_shape = "cylinder"

ss_spoke_extents = vec3(random.randint(3,8), space_station_radius / 2.0, random.randint(3,8))

ss_centre_radius = random.randint(7,15)
ss_centre_extents = vec3(ss_centre_radius, random.randint(10,30), ss_centre_radius)
ss_centre_shape = "ellipsoid"
if random.randint(1,2) <= 1:
    ss_centre_shape = "cylinder"

ss_spire_tower_scale_factor = vec3(random.uniform(0.5, 0.9), random.uniform(0.4, 0.6), random.uniform(0.5, 0.9))

ss_tower_top_scale_factor = random.uniform(0.5,0.8)
ss_tower_top_present = True
if random.randint(1,2) <= 1:
    ss_tower_top_present = False

def space_station(parent):
    parent.active = False
    
    #make ring using subtaction
    ring = Node("ellipsoid")
    ring.position = vec3(0,0,0)
    ring.extents = space_station_extents
    ring.tags = ["ring"]
    ring.priority = 0
    
    subtractive_ring = Node("cylinder")
    subtractive_ring.position = vec3(0,0,0)
    subtractive_ring.extents = space_station_subtractive_disk_extents
    subtractive_ring.additive = False
    subtractive_ring.priority = ring.priority - 1

    #make spire
    spire = Node("spire")
    spire.position = vec3(space_station_radius,0,0)
    spire.extents = ss_spire_extents #vec3(16,32,16)
    spire.tags.append("spire")
    spire.setSymmetry("rotational", vec3(0,0,0), vec3(0,1,0), space_station_num_spires)
    spire.priority = subtractive_ring.priority - 1

    #add spokes
    spoke = Node("space_station_spoke")
    spoke.position = vec3(-space_station_radius / 2.0, 0, 0)
    spoke.extents = ss_spoke_extents #vec3(5,32,5)
    spoke.orientation = mat3.rotation(math.pi / 2, vec3(0,0,1))
    spoke.tags.append("spoke")
    spoke.setSymmetry("rotational", vec3(0,0,0), vec3(0,1,0), space_station_num_spokes)
    spoke.priority = -5

    #add central blob
    cent = Node(ss_centre_shape)
    cent.position = vec3(0,0,0)
    cent.extents = ss_centre_extents #vec3(10,10,10)
    cent.tags.append("centre")
    cent.priority = subtractive_ring.priority - 1
    
    return [ring, subtractive_ring, spire, spoke, cent]

def space_station_spoke(parent):
    parent.name = "cylinder"

    subspoke = Node("cylinder")
    subspoke.position = vec3(0,0,0)
    subspoke.additive = False
    subspoke.extents.x = parent.extents.x * 0.5
    subspoke.extents.y = parent.extents.y * 1.2
    subspoke.extents.z = parent.extents.z * 0.5
    subspoke.priority = -10
    subspoke.tags.append("spoke_passage")

    return [subspoke]

def spire(parent):
    parent.name = ss_spire_shape
    
    tow = Node("tower")
    tow.position = parent.corner_relative(0,1,0)
    tow.extents = vec3(parent.extents.x * ss_spire_tower_scale_factor.x, parent.extents.y * ss_spire_tower_scale_factor.y, parent.extents.z * ss_spire_tower_scale_factor.z)
    tow.setSymmetry("reflective", parent.position, vec3(0,1,0))
    
    return [tow]

def tower(parent):
    parent.name = "cylinder"

    ret = []

    if ss_tower_top_present:
        tower_top = Node("cylinder")
        tower_top.tags.append("tower")
        tower_top.position = parent.corner_relative(0,1,0)
        tower_top.extents = parent.extents * ss_tower_top_scale_factor

        ret.append(tower_top)
        
    return ret

#-------------------------------------------------------------
#uses absolute coordinates (-a)

def klingon(parent):
    parent.active = False
    ret = Node("body", vec3(0,0,0), vec3(20,20,40), mat3(1.0))
    parent.active = False

    ret2 = Node("wing", vec3(ret.extents[0]*2, 0, -15), vec3(50,3,15), mat3(1.0))
    ret2.orientation = mat3.rotation(35, vec3(0,0,1))
    ret2.setSymmetry("reflective", ret.position, vec3(1,0,0))
        
    return [ret, ret2]

def body(parent):
    ret = parent.copy()
    ret.name = "ellipsoid"
    parent.active = False

    frontthing = Node("front", vec3(0,5,parent.extents[2]), vec3(7,40,7), mat3.rotation(math.pi / 2.0, vec3(1,0,0)))
    
    return [ret, frontthing]

def wing(parent):
    ret = parent.copy()
    ret.name = "rectangle"
    parent.active = False

    subtract_wing = parent.copy()
    subtract_wing.additive = False
    subtract_wing.orientation = subtract_wing.orientation.rotate(math.pi / 8, vec3(100,42,0))
    subtract_wing.position = subtract_wing.position + vec3(0,0,-15)

    gun = Node("winggun", vec3(0,0,0), vec3(20,20,40), mat3(1.0))
    gun.position = ret.position + (ret.orientation.getRow(0) * -ret.extents[0])
    gun.position = gun.position + vec3(0,-gun.extents[1] / 2.0,gun.extents[2] / 2.0)
    gun.extents = vec3(4,20,4)
    gun.orientation = mat3.rotation(-math.pi / 2, vec3(1,0,0))
    
    return [ret, subtract_wing, gun]

def winggun(parent):
    ret = parent.copy()
    ret.name = "cylinder"
    parent.active = False
    
    return [ret]

def front(parent):
    ret = parent.copy()
    ret.name = "cylinder"
    parent.active = False

    frontthing = Node("cockpit", parent.position, vec3(9,20,9), mat3.rotation(math.pi / 2.0, vec3(1,0,0)))
    frontthing.position = parent.position +vec3(0,0,parent.extents[2] * 4)
    
    return [ret, frontthing]

def cockpit(parent):
    ret = parent.copy()
    ret.name = "ellipsoid"
    parent.active = False
    return [ret]

#=============================================================
#uses absolute coordinates (-a)

def spike_ship(parent):
    parent.active = False
    #make a nice central cylinder
    body = Node("cylinder", vec3(0,0,100), vec3(25,100,25), mat3.rotation(math.pi/2, vec3(1,0,0)))

    front = Node("ss_front", vec3(0,15,200), vec3(20,10,40), mat3.rotation(math.pi / 2, vec3(0,0,1)))
    front.setSymmetry("rotational", vec3(0,0,200), vec3(0,0,1), 4)

    back = Node("ss_back", vec3(0,0,0), vec3(20,60,20), mat3.rotation(-math.pi / 3, vec3(1,0,0)))
    back.setSymmetry("rotational", vec3(0,0,0), vec3(0,0,1), 3)

    side_wing = Node("ss_side_wing", vec3(0,0,100), vec3(20,5,15), mat3(1.0))
    side_wing.setSymmetry("reflective", vec3(0,0,0), vec3(1,0,0))
    
    return [body, back, front, side_wing]

def ss_front(parent):
    shape = parent.copy()
    shape.name = "ellipsoid"
    
    parent.active = False
    return [shape]

def ss_back(parent):
    shape = parent.copy()
    shape.name = "rectangle"

    ret = parent.copy()
    ret.extents = vec3(ret.extents[0] * 0.75,ret.extents[1],ret.extents[2] * 0.75)
    ret.position = parent.position + (ret.orientation.getColumn(1) * (parent.extents[0] * 2))
    ret.orientation = ret.orientation.rotate(0.2, vec3(1,0,0))
    
    parent.active = False
    return [shape, ret]

def ss_side_wing(parent):
    shape = parent.copy()
    shape.name = "rectangle"

    ret = parent.copy()
    ret.extents = vec3(ret.extents[0] * 0.8, ret.extents[1], ret.extents[2])
    ret.position = parent.position + (ret.orientation.getColumn(0) * (parent.extents[0] * 2))
    ret.orientation = ret.orientation.rotate(-0.3, vec3(0,1,0))
    
    parent.active = False
    return [shape, ret]

#===========================================================
#uses absolute coordinates (-a)

def wing_ship(parent):
    parent.active = False
    #make a nice central cylinder
    body = Node("ellipsoid", vec3(0,0,100), vec3(25,35,100), mat3(1.0))
    temp = Node("rectangle", vec3(0,10,55), vec3(15,20,75), mat3(1.0))
    body.children.insert(0, temp)
    temp = Node("ellipsoid", vec3(0,15,0), vec3(30,30,30), mat3(1.0))
    body.children.insert(0, temp)
    body.priority -= 3

    front = Node("ws_front", vec3(0,-15,200), vec3(5,10,20), mat3.rotation(-math.pi / 4, vec3(1,0,0)))

    side_wing = Node("ws_side_wing", vec3(20,30,50), vec3(40,10,40))
    side_wing.setSymmetry("reflective", vec3(0,0,0), vec3(1,0,0))
    
    return [body, front, side_wing]

def ws_front(parent):
    shape = parent.copy()
    shape.name = "rectangle"
    shape.position = vec3(shape.position[0], shape.position[1] + 10, shape.position[2])

    ret = Node("ellipsoid", parent.position, vec3(5,20,70))
    ret.position = ret.position + vec3(0,40,-20)
    
    parent.active = False
    return [shape, ret]

def ws_side_wing(parent):
    shape = parent.copy()
    shape.name = "cylinder"

    ret = parent.copy()
    ret.name = "cylinder"
    ret.additive = False
    ret.extents = vec3(ret.extents[0], ret.extents[1] * 0.5, ret.extents[2])
    ret.priority -= 1

    ret2 = shape.copy()
    ret2.extents = vec3(ret2.extents[0] * 0.75, ret2.extents[1] * 0.5, ret2.extents[2] * 0.75)
    ret2.priority -= 2
    
    parent.active = False
    return [shape, ret, ret2]

#===========================================================
#uses absolute coordinates (-a)

def c_station(parent):
    parent.active = False
    #make a nice central cylinder
    central_spire = Node("cs_central_spire", vec3(0,0,0), vec3(25,200,25), mat3(1.0))
    central_spire.tags.append("central_spire")

    wing = Node("cs_wing", vec3(100,0,0), vec3(100,75,50), mat3(1.0))
    wing.tags.append("wing")
    wing.setSymmetry("rotational", vec3(0,0,0), vec3(0,1,0), 3)
    
    return [central_spire, wing]

def cs_wing(parent):
    parent.name = "ellipsoid"

    indentation = Node("cs_wing_indentation", parent.position + vec3(10,0,40), vec3(90,40,20), mat3(1.0))
    indentation.tags.append("indent")
    indentation.setSymmetry("reflective", parent.position, vec3(0,0,1))
    indentation.priority = -3

    wing_hole = Node("cylinder", parent.position + vec3(50,0,0), vec3(40,40,40), mat3.rotation(math.pi / 2, vec3(1,0,0)))
    wing_hole.tags.append("indent")
    wing_hole.additive = False
    wing_hole.priority = -2
    dock_area = Node("rectangle", wing_hole.position + vec3(-50,20,0), vec3(30,10,10), mat3(1.0))
    dock_area.setSymmetry("reflective", wing_hole.position, vec3(0,1,0))
    dock_area.additive = False
    dock_area.priority = -5

    wing_hole.children.insert(0, dock_area)
    parent.children.insert(0, wing_hole)
    
    return [indentation]

def cs_wing_indentation(parent):
    parent.name = "rectangle"
    parent.additive = False

    return [Node("fuckoff")]

def cs_central_spire(parent):
    parent.name = "ellipsoid"

    return [Node("fuckoff")]

#=============================================================
#uses absolute coordinates (-a)

def rotational_ship(parent):
    parent.active = False
    #make a nice central cylinder
    body = Node("cylinder", vec3(0,0,50), vec3(25,60,25), mat3.rotation(math.pi/2, vec3(1,0,0)))

    front = Node("rs_front", vec3(0,50,100), vec3(10,30,90), mat3(1.0))
    front.setSymmetry("rotational", vec3(0,0,0), vec3(0,0,1), 4)

    back = Node("rs_back", vec3(0,0,0), vec3(60,20,60), mat3.rotation(math.pi / 2, vec3(1,0,0)))
    
    side_wing = Node("rs_side_wing", vec3(0,40,-40), vec3(20,30,50), mat3(1.0))
    side_wing.setSymmetry("rotational", vec3(0,0,0), vec3(0,0,1), 4)
    
    return [body, front, back, side_wing]

def rs_front(parent):
    shape = parent.copy()
    shape.name = "rectangle"

    sub_wing = shape.copy()
    sub_wing.position = sub_wing.position + vec3(0, shape.extents[1], 0)
    sub_wing.additive = False
    sub_wing.extents = vec3(sub_wing.extents[0], sub_wing.extents[1], sub_wing.extents[2] * 1.2)
    sub_wing.orientation = sub_wing.orientation.rotate(-math.pi / 14, vec3(1,0,0))
    shape.children.insert(0,sub_wing)
    
    parent.active = False
    return [shape]

def rs_back(parent):
    shape = parent.copy()
    shape.name = "cylinder"
    
    parent.active = False
    return [shape]

def rs_side_wing(parent):
    shape = parent.copy()
    shape.name = "rectangle"

    sub_wing = shape.copy()
    sub_wing.position = sub_wing.position + vec3(0, shape.extents[1], 0)
    sub_wing.additive = False
    sub_wing.extents = vec3(sub_wing.extents[0], sub_wing.extents[1], sub_wing.extents[2] * 1.2)
    sub_wing.orientation = sub_wing.orientation.rotate(math.pi / 14, vec3(1,0,0))
    shape.children.insert(0,sub_wing)
    
    parent.active = False
    return [shape]

#==================================================
#uses absolute coordinates (-a)

tie_cockpit_size = vec3(30,30,30) #vec3(random.randint(25,35), random.randint(25,35), random.randint(25, 35))

tie_wing_length = 30 #random.randint(20,20)
tie_wing_width = 10 #random.randint(10,10)
tie_wing_extents = vec3(tie_wing_width, tie_wing_length, tie_wing_width)
tie_num_wings = random.randint(2,2)

tie_wing_fins_extents = vec3(100,5,100)

def tie_fighter(parent):
    parent.active = False

    cockpit = Node("tie_cockpit")
    cockpit.position = vec3(0,0,0)
    cockpit.extents = tie_cockpit_size
    cockpit.tags.append("cockpit")

    return [cockpit]

def tie_cockpit(parent):
    parent.name = "ellipsoid"

    wing = Node("tie_wing")
    wing.extents = tie_wing_extents
    wing.position = parent.corner_relative(1,0,0)# + vec3(tie_wing_length,0,0)
    
    wing.orientation = mat3.rotation(math.pi / 2.0, vec3(0,0,1))
    #wing.setSymmetry("rotational", vec3(0,0,0), vec3(0,0,1), tie_num_wings)
    wing.setSymmetry("reflective", parent.position, vec3(1,0,0))
    wing.tags.append("wing")

    return [wing]

def tie_wing(parent):
    parent.name = "cylinder"

    fin = Node("tie_wing_fin")
    fin.position = parent.corner_relative(-5,0,0)
    fin.extents = tie_wing_fins_extents
    
    return [fin]

def tie_wing_fin(parent):
    parent.name = "rectangle"

    sub_wing_front = Node("rectangle")
    sub_wing_front.additive = True #False
    sub_wing_front.position = parent.corner_relative(1,0,1)
    sub_wing_front.extents = parent.extents
    sub_wing_front.orientation = mat3.rotation(-math.pi / 6, vec3(1,0,0))
    #sub_wing_front.setSymmetry("reflective", parent.position, vec3(1,0,0))

    sub_wing_back = Node("rectangle")
    sub_wing_back.additive = False
    sub_wing_back.position = parent.corner_relative(-1.35,0,-1.35)
    sub_wing_back.extents = parent.extents
    sub_wing_back.orientation = mat3.rotation(math.pi / 6, vec3(1,0,0))
    sub_wing_back.setSymmetry("reflective", parent.position, vec3(1,0,0))
            
    return []#sub_wing_front]#, sub_wing_back]
