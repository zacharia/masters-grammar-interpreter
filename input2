#axiom = Node("s1")
axiom = Node("s2")

def s1(parent):
    ret = Node("ellipsoid", (0,0,0), (64,10,64), math3D.zeroQ())
    ret2 = Node("cylinder", (0,0,0), (50,20,50), math3D.zeroQ(), in_additive=False)
    spire = Node("spire", (64,0,0), (16,32,16), math3D.zeroQ())
    spire.setSymmetry("rotational", (0,0,0), (0, 1, 0), 3)
    return [ret, ret2, spire]

def spire(parent):
    ret = parent.copy()
    ret.name = "ellipsoid"
    
    tow = Node("tower", parent.position, (10,20,10), math3D.zeroQ())
    #tow.position = (0, (parent.extents[1] / 2.0), 0)
    tow.setSymmetry("reflective", parent.position, (0,1,0))
    
    return [ret, tow]

def tower(parent):
    ret = parent.copy()
    ret.position = (ret.position[0] + parent.extents[0], ret.position[1] + parent.extents[1], ret.position[2])
    ret.extents = math3D.scale3(ret.extents, 0.75)
    ret.orientation = math3D.multiplyQ(ret.orientation, math3D.fromAngleAxisQ(-0.2, 0,0,1))
    
    parent.name = "cylinder"
    return [ret]

#-------------------------------------------------------------

def s2(parent):
    ret = Node("block", (0,64,0), (16,16,16), math3D.zeroQ())
    #ret.setSymmetry("reflective", (0,0,0), (0,1,0))
    ret.setSymmetry("rotational", (0,0,0), (0,0,1), 3)
    return [ret]

def block(parent):
    ret = parent.copy()
    ret.extents = math3D.scale3(ret.extents, 0.8)
    ret.position = math3D.add3(parent.position, (0,32,0))
    #ret.setSymmetry("rotational", parent.position, (0,0,1), 3)
    ret.setSymmetry("reflective", parent.position, (0,1,0))
    ret.name = "rectangle"
    
    parent.name = "ellipsoid"
        
    return [ret]

#def block(parent):
#    ret = parent.copy()
#    ret.name = "rectangle"
#    return [ret]
