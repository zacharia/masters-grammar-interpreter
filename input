#conventions:
#returns a list of node objects
#takes a single argument, which is the parent node
#defines a Node object with name axiom. This is the axiom of the grammar

#axiom = Node("begin")
axiom = Node("start")

#=============================reflection stuff

def start(parent):
    ret = Node("cube", in_position=(4.0, 4.0, 4.0), in_extents=(1,2,1), in_orientation=math3D.fromAngleAxisQ(math.pi / 4, 1,0,0))
    ret.setSymmetry("reflective", (0,0,0), (1.0, 1.0, 1.0))
    return [ret]

def fcube(parent):
    ret = Node("cylinder", in_position=(1.0, 0.0, 0.0), in_extents=(1,1,1), in_orientation=math3D.fromAngleAxisQ(math.pi/3, 1,1,1))
    return [ret]

def two(parent):
    ret = Node("two")
    return [ret]

#===============================rotation stuff

def begin(parent):
    ret = Node("cylinder", in_position=(5.0, 0.0, 0.0), in_extents=(1.0, 1.0, 3.0), in_orientation=math3D.zeroQ())
    #math3D.fromAngleAxisQ(90, 0,1,0)
    ret.setSymmetry("rotational", math3D.zero3(), (0.0, 1.0, 0.0), 3)
    return [ret]

def next(parent):
    ret = Node("twosdfasdf")
    
    return [ret]

# def two(parent):
#     ret = Node("two")
#     return [ret]
