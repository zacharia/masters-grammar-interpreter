#conventions:
#returns a list of node objects
#takes a single argument, which is the parent node
#defines a Node object with name axiom. This is the axiom of the grammar

axiom = Node("begin")
#axiom = Node("start")
#axiom = Node("first")

#=============================reflection stuff

def start(parent):
    ret = Node("rectangle", in_position=(40.0, 40.0, 40.0), in_extents=(10,20,10), in_orientation=math3D.fromAngleAxisQ(0, 1,1,1))
    ret.setSymmetry("reflective", (70,70,70), (0.0, 1.0, 1.0))
    return [ret]

def fcube(parent):
    ret = Node("cylinder", in_position=(1.0, 0.0, 0.0), in_extents=(1,1,1), in_orientation=math3D.fromAngleAxisQ(math.pi/3, 1,1,1))
    return [ret]

def two(parent):
    ret = Node("two")
    return [ret]

#===============================rotation stuff

def begin(parent):
    ret = Node("cylinder", in_position=(50.0, 20, 50.0), in_extents=(10.0, 10.0, 10.0), in_orientation=math3D.zeroQ())

    ret.setSymmetry("rotational", (50,60,50), (1, 0, 0), 5)
    return [ret]

#=============================================

def first(parent):
    ret = Node("cylinder", in_position=(0.0, 5.0, 0.0), in_extents=(1.0, 5.0, 1.0), in_orientation=math3D.zeroQ())
    #math3D.fromAngleAxisQ(90, 0,1,0)
    ret.setSymmetry("rotational", math3D.zero3(), (0.0, 0.0, 1.0), 3)
    return [ret]

def cylinder(parent):
    ret = Node("cylinder", in_position=math3D.add3(parent.position, (0, 10, 0)), in_extents=math3D.scale3(parent.extents, 0.5), in_orientation=math3D.multiplyQ(parent.orientation, parent.orientation))
    ret.setSymmetry("rotational", parent.position, (0.0, 0.0, 1.0), 3)
    return [ret]
